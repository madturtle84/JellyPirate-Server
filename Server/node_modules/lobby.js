function Room(rid){
    // -- Attributes --
    this.roomID=undefined;
    this.playersSIDTable=[];
    this.unitySID=0;
    //this.maxNumPlayer= 3;
    this.maxNumPlayer= 4;
    this.currentNumPlayer=0;
    this.gameType='mb';
    // -- Initialize --
    this.roomID=rid;
    console.log('Room '+rid+' created.');
    // -- init playerSIDTable
    //this.printIDTable();
    for(var i=0; i<this.maxNumPlayer; i++){
        this.playersSIDTable.push(0);
    }
}
Room.prototype={
    //roomID:undefined,
    //playersSIDTable:[],
    //unitySID:0,
    //maxNumPlayer: 3,
    //currentNumPlayer:0,
    //gameType:'mb',

    _init:function(rid){
        this.roomID=rid;
        console.log('Room '+rid+' created.');
        // -- init playerSIDTable
        //this.printIDTable();
        this.playersSIDTable=[];// WIERD~~If I don't clear the table here it will contain the value of the PREVIOUS ROOM!!!!
        for(var i=0; i<this.maxNumPlayer; i++){
            this.playersSIDTable.push(0);
        }
    },

    // Add player to the room and return the index of the player.
    addPlayer:function(sid){
        if(this.currentNumPlayer<this.maxNumPlayer){
            for(var i=0; i<this.maxNumPlayer; i++){
                if(this.playersSIDTable[i]==0){
                    this.playersSIDTable[i]=sid;
                    this.currentNumPlayer++;
                    console.log('Add '+sid+' as player '+i);
                    this.printIDTable();
                    return i;
                }
            }
        }
        else{
            console.log('This room is full.');
        }
    },
    removePlayer:function(sid){
        for(var i=0; i<this.maxNumPlayer; i++){
            if(sid==this.playersSIDTable[i]) {
                this.playersSIDTable[i]=0;
                this.currentNumPlayer--;
                console.log('Removed Player '+i);
            }
        }
        this.checkSelfDestruction();
    },

    addUnity:function(sid){
        if(this.unitySID == 0) {
            this.unitySID = sid;
            console.log('Add Unity: '+sid+' to room '+this.roomID);
            return true;
        }
        else {
            console.log('Access Denied for Unity client: '+sid+'. Another Unity has logged in.');
            return false;
        }
    },

    removeUnity: function(sid){
        this.unitySID=0;
    },

    checkSelfDestruction:function(){
        if(this.unitySID == 0 && this.currentNumPlayer==0){
            // Do something?
        }
    },

    playerExist:function(sid){
        //console.log('room '+ this.roomID + ', lastIndexOf ' + sid+' ='+this.playersSIDTable.lastIndexOf(sid));
        return this.playersSIDTable.lastIndexOf(sid);

    },

    printIDTable:function(){
        for (var i=0;i<this.maxNumPlayer; i++){
            console.log("Room " + this.roomID+": Player" + i + " -> "+this.playersSIDTable[i]);
        }
    },

    getRoomInfoHTML:function(){
        var htmlString='';

        //return '
    }
};


var Lobby={

    // Originally have 5 room for the convenience of testing.
    rooms:[new Room(0),new Room(1),new Room(2),new Room(3),new Room(4),
        new Room(5),new Room(6),new Room(7),new Room(8),new Room(9)
    ],
    createRoom:function(){
        this.rooms.push(new Room(this.rooms.length));
    },
    createAndJoin:function(sid){
        this.rooms.push(new Room());
        //this.rooms[this.rooms.length-1].addPlayer(sid);
        console.log('Created a new room: Room '+ (this.rooms.length-1));
        this.playerJoinRoom(sid, this.rooms.length-1);
    },
    playerJoinRoom:function(sid, roomNum){
        if(roomNum==undefined) {
            roomNum=0;
            //console.log('ERROR: Must specific a room number.');
            //return;
        }
        if(this.rooms[roomNum]==undefined) {
            console.log('Room '+roomNum+ ' doesnt exist.');
            return;
        }
        return this.rooms[roomNum].addPlayer(sid);
        //console.log('Added player: ' +sid+ ' to room ' +roomNum);
        //this.rooms[roomNum].printIDTable();
    },
    playerDisconnected:function(sid, roomNum){
        if(roomNum==undefined) roomNum=this.getRoomWherePlayerLocated(sid);
        if(this.rooms[roomNum]==undefined) return;
        this.rooms[roomNum].removePlayer(sid);
    },

    unityJoinRoom:function(sid,roomNum){
        if(roomNum == undefined) roomNum=0;
        if(this.rooms[roomNum]==undefined) {
            console.log('Room '+roomNum+ ' doesnt exist.');
            return false;
        }
        return this.rooms[roomNum].addUnity(sid);
    },
    unityDisconnected:function(sid, roomNum){
        if(roomNum==undefined) roomNum=this.getRoomWhereUnityLocated(sid);
        if(this.rooms[roomNum]==undefined) return;
        this.rooms[roomNum].removeUnity();
    },
    sendU2PEvent:function(msgFromUnity){

    },

    getU2PEventReceiver:function(unitySID,unityMsg){
        var roomID = this.getRoomWhereUnityLocated(unitySID);
        if(roomID != -1) return this.rooms[roomID].playersSIDTable[unityMsg.pid];
        else console.log('[getU2PEventReceiver] Unity not found in the lobby');
    },

    getRoomWherePlayerLocated: function (sid) {
        //--Should have better way....
        for(var rmIdx=0; rmIdx<this.rooms.length; rmIdx++){
            if(this.rooms[rmIdx].playerExist(sid) != -1) return rmIdx;
        }
        // return -1 if player is not found in any room.
        return -1;
    },
    getRoomWhereUnityLocated:function(sid){
        for(var rmIdx=0; rmIdx<this.rooms.length; rmIdx++){
            if(this.rooms[rmIdx].unitySID == sid) return rmIdx;
        }
        // return -1 if Unity is not found in any room.
        return -1;
    },
    getConnectedUnitySID:function(playerSID){
        var roomID=this.getRoomWherePlayerLocated(playerSID);
        return this.rooms[roomID].unitySID;
    },

    getRoomsInfoHTML:function(){
        var htmlString="";
        for(var roomIdx=0; roomIdx<rooms.length; roomIdx++){
            htmlString += "Room "+ roomIdx+" has " + this.rooms[roomIdx].numPlayer + ' players.';
            //for(var pi=0; pi<)
        }
        return htmlString;
    },
    //===== Debug ====
    consoleShowAllRooms:function(){
        console.log("Showing all rooms data...");
        for(var ri=0; ri<this.rooms.length; ri++){
            this.rooms[ri].printIDTable();
            console.log('Room '+ri+': Unity SID -> '+this.rooms[ri].unitySID);
        }
    }
};

module.exports=Lobby;